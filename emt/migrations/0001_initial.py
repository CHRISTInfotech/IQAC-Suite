# Generated by Django 5.2.3 on 2025-10-16 10:34

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CDLSupport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('needs_support', models.BooleanField(default=False)),
                ('completed', models.BooleanField(default=False, help_text="When true, this event's CDL work is considered completed and shown under Analysis")),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('poster_required', models.BooleanField(default=False)),
                ('poster_choice', models.CharField(blank=True, choices=[('cdl_create', 'Ask CDL to make the poster'), ('provide_design', 'Provide my own poster design')], max_length=20)),
                ('organization_name', models.CharField(blank=True, max_length=255)),
                ('poster_time', models.CharField(blank=True, max_length=100)),
                ('poster_date', models.DateField(blank=True, null=True)),
                ('poster_venue', models.CharField(blank=True, max_length=255)),
                ('resource_person_name', models.CharField(blank=True, max_length=255)),
                ('resource_person_designation', models.CharField(blank=True, max_length=255)),
                ('poster_event_title', models.CharField(blank=True, max_length=255)),
                ('poster_summary', models.TextField(blank=True)),
                ('poster_design_link', models.URLField(blank=True)),
                ('other_services', models.JSONField(blank=True, default=list)),
                ('certificates_required', models.BooleanField(default=False)),
                ('certificate_help', models.BooleanField(default=False)),
                ('certificate_choice', models.CharField(blank=True, choices=[('cdl_create', 'Ask CDL to make the certificate'), ('provide_template', 'Provide my own certificate template')], max_length=20)),
                ('certificate_design_link', models.URLField(blank=True)),
                ('blog_content', models.TextField(blank=True)),
                ('completed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cdl_completed_events', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CDLMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(blank=True)),
                ('file', models.FileField(blank=True, null=True, upload_to='cdl_messages/')),
                ('via_email', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('support', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='emt.cdlsupport')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='CDLCertificateRecipient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('role', models.CharField(blank=True, max_length=255)),
                ('certificate_type', models.CharField(choices=[('core_team', 'Core Team Member'), ('event_head', 'Event Head / Coordinator'), ('participant', 'Participant'), ('other', 'Other')], max_length=30)),
                ('ai_approved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('support', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificate_recipients', to='emt.cdlsupport')),
            ],
        ),
        migrations.CreateModel(
            name='EventProposal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('needs_finance_approval', models.BooleanField(default=False, help_text='Check if this event needs finance approval')),
                ('is_big_event', models.BooleanField(default=False, help_text='Check if this is a big event (Dean sign-off needed)')),
                ('committees', models.TextField(blank=True, help_text='List of committees involved.')),
                ('committees_collaborations', models.TextField(blank=True, help_text='Committees and collaborations involved.')),
                ('event_title', models.CharField(max_length=200)),
                ('num_activities', models.PositiveIntegerField(blank=True, null=True)),
                ('event_datetime', models.DateTimeField(blank=True, null=True)),
                ('event_start_date', models.DateField(blank=True, null=True)),
                ('event_end_date', models.DateField(blank=True, null=True)),
                ('venue', models.CharField(blank=True, max_length=200)),
                ('academic_year', models.CharField(blank=True, max_length=20)),
                ('target_audience', models.CharField(blank=True, max_length=200)),
                ('pos_pso', models.TextField(blank=True)),
                ('student_coordinators', models.TextField(blank=True, help_text='Comma-separated student coordinator names (temporary).')),
                ('event_focus_type', models.CharField(blank=True, max_length=200)),
                ('report_generated', models.BooleanField(default=False)),
                ('report_assigned_at', models.DateTimeField(blank=True, null=True)),
                ('fest_fee_participants', models.PositiveIntegerField(blank=True, null=True)),
                ('fest_fee_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('fest_fee_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('fest_sponsorship_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('conf_fee_participants', models.PositiveIntegerField(blank=True, null=True)),
                ('conf_fee_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('conf_fee_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('conf_sponsorship_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('under_review', 'Under Review'), ('waiting', 'Waiting for Action'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('returned', 'Returned for Revision'), ('finalized', 'Finalized')], default='draft', max_length=20)),
                ('is_user_deleted', models.BooleanField(default=False, help_text='Hide draft from submitter while retaining it for admin review.')),
                ('faculty_incharges', models.ManyToManyField(blank=True, related_name='faculty_incharge_proposals', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='emt_proposals', to='core.organization')),
                ('report_assigned_to', models.ForeignKey(blank=True, help_text='User assigned to generate the report for this event', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_report_tasks', to=settings.AUTH_USER_MODEL)),
                ('sdg_goals', models.ManyToManyField(blank=True, related_name='event_proposals', to='core.sdggoal')),
                ('submitted_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emt_eventproposals', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Event Proposal',
                'verbose_name_plural': 'Event Proposals',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EventObjectives',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('proposal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='objectives', to='emt.eventproposal')),
            ],
        ),
        migrations.CreateModel(
            name='EventNeedAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('proposal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='need_analysis', to='emt.eventproposal')),
            ],
        ),
        migrations.CreateModel(
            name='EventExpectedOutcomes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('proposal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='expected_outcomes', to='emt.eventproposal')),
            ],
        ),
        migrations.CreateModel(
            name='EventActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('date', models.DateField()),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='emt.eventproposal')),
            ],
            options={
                'ordering': ['date', 'id'],
            },
        ),
        migrations.AddField(
            model_name='cdlsupport',
            name='proposal',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cdl_support', to='emt.eventproposal'),
        ),
        migrations.CreateModel(
            name='CDLAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(blank=True, help_text="Role context, e.g., 'CDL Head' or 'CDL Employee'", max_length=100)),
                ('status', models.CharField(choices=[('assigned', 'Assigned'), ('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed')], default='assigned', max_length=20)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cdl_assigned_events', to=settings.AUTH_USER_MODEL)),
                ('assignee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cdl_assignments', to=settings.AUTH_USER_MODEL)),
                ('proposal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cdl_assignment', to='emt.eventproposal')),
            ],
            options={
                'ordering': ['-assigned_at'],
            },
        ),
        migrations.CreateModel(
            name='ApprovalStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step_order', models.PositiveIntegerField(blank=True, null=True)),
                ('order_index', models.PositiveIntegerField(default=0)),
                ('role_required', models.CharField(blank=True, choices=[('faculty', 'Faculty'), ('faculty_incharge', 'Faculty In-Charge'), ('dept_iqac', 'Department IQAC'), ('hod', 'Head of Department'), ('director', 'Director'), ('dean', 'Dean'), ('finance', 'Finance Officer')], max_length=50, null=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('is_optional', models.BooleanField(default=False)),
                ('optional_unlocked', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('skipped', 'Skipped')], default='pending', max_length=20)),
                ('decided_at', models.DateTimeField(blank=True, null=True)),
                ('note', models.TextField(blank=True)),
                ('comment', models.TextField(blank=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='completed_approvals', to=settings.AUTH_USER_MODEL)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_approvals', to=settings.AUTH_USER_MODEL)),
                ('decided_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='decided_steps', to=settings.AUTH_USER_MODEL)),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approval_steps', to='emt.eventproposal')),
            ],
            options={
                'verbose_name': 'Approval Step',
                'verbose_name_plural': 'Approval Steps',
                'ordering': ['order_index'],
            },
        ),
        migrations.CreateModel(
            name='EventReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('finalized', 'Finalized')], default='draft', max_length=20)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('blog_link', models.URLField(blank=True)),
                ('actual_event_type', models.CharField(blank=True, max_length=200)),
                ('num_student_volunteers', models.PositiveIntegerField(blank=True, null=True)),
                ('num_participants', models.PositiveIntegerField(blank=True, null=True)),
                ('num_student_participants', models.PositiveIntegerField(blank=True, null=True)),
                ('num_faculty_participants', models.PositiveIntegerField(blank=True, null=True)),
                ('num_external_participants', models.PositiveIntegerField(blank=True, null=True)),
                ('organizing_committee', models.TextField(blank=True)),
                ('actual_speakers', models.TextField(blank=True)),
                ('external_contact_details', models.TextField(blank=True)),
                ('summary', models.TextField(blank=True)),
                ('key_achievements', models.TextField(blank=True)),
                ('notable_moments', models.TextField(blank=True)),
                ('outcomes', models.TextField(blank=True)),
                ('learning_outcomes', models.TextField(blank=True)),
                ('participant_feedback', models.TextField(blank=True)),
                ('measurable_outcomes', models.TextField(blank=True)),
                ('impact_assessment', models.TextField(blank=True)),
                ('analysis', models.TextField(blank=True)),
                ('objective_achievement', models.TextField(blank=True)),
                ('strengths_analysis', models.TextField(blank=True)),
                ('challenges_analysis', models.TextField(blank=True)),
                ('effectiveness_analysis', models.TextField(blank=True)),
                ('lessons_learned', models.TextField(blank=True)),
                ('impact_on_stakeholders', models.TextField(blank=True)),
                ('innovations_best_practices', models.TextField(blank=True)),
                ('pos_pso_mapping', models.TextField(blank=True)),
                ('needs_grad_attr_mapping', models.TextField(blank=True)),
                ('contemporary_requirements', models.TextField(blank=True)),
                ('sdg_value_systems_mapping', models.TextField(blank=True)),
                ('iqac_feedback', models.TextField(blank=True)),
                ('session_feedback', models.TextField(blank=True, help_text='Latest review feedback for current session')),
                ('review_stage', models.CharField(choices=[('user', 'With Submitter'), ('diqac', 'D-IQAC Coordinator'), ('hod', 'Head of Department'), ('uiqac', 'University IQAC Coordinator'), ('finalized', 'Finalized')], default='user', max_length=20)),
                ('report_signed_date', models.DateField(default=django.utils.timezone.now)),
                ('beneficiaries_details', models.TextField(blank=True)),
                ('attendance_notes', models.TextField(blank=True, default='')),
                ('ai_generated_report', models.TextField(blank=True, help_text='This field will store the report generated by AI.', null=True)),
                ('generated_payload', models.JSONField(blank=True, default=dict, help_text='Stores the most recent autosave payload so partially completed reports can be recovered without breaking database constraints.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('proposal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='event_report', to='emt.eventproposal')),
            ],
            options={
                'verbose_name': 'Event Report',
                'verbose_name_plural': 'Event Reports',
            },
        ),
        migrations.CreateModel(
            name='AttendanceRow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_no', models.CharField(max_length=32)),
                ('full_name', models.CharField(max_length=128)),
                ('student_class', models.CharField(max_length=128)),
                ('absent', models.BooleanField(default=False)),
                ('volunteer', models.BooleanField(default=False)),
                ('category', models.CharField(choices=[('student', 'Student'), ('faculty', 'Faculty'), ('external', 'External')], default='student', max_length=16)),
                ('event_report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_rows', to='emt.eventreport')),
            ],
        ),
        migrations.CreateModel(
            name='EventReportAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='report_attachments/')),
                ('caption', models.CharField(blank=True, max_length=255)),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='emt.eventreport')),
            ],
        ),
        migrations.CreateModel(
            name='EventReportMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='emt.eventreport')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExpenseDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sl_no', models.PositiveIntegerField()),
                ('particulars', models.CharField(max_length=200)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expense_details', to='emt.eventproposal')),
            ],
            options={
                'verbose_name': 'Expense Detail',
                'verbose_name_plural': 'Expense Details',
                'ordering': ['sl_no'],
            },
        ),
        migrations.CreateModel(
            name='IncomeDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sl_no', models.PositiveIntegerField()),
                ('particulars', models.CharField(max_length=200)),
                ('participants', models.PositiveIntegerField()),
                ('rate', models.DecimalField(decimal_places=2, max_digits=10)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='income_details', to='emt.eventproposal')),
            ],
            options={
                'verbose_name': 'Income Detail',
                'verbose_name_plural': 'Income Details',
                'ordering': ['sl_no'],
            },
        ),
        migrations.CreateModel(
            name='MediaRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media_type', models.CharField(choices=[('Poster', 'Poster'), ('Video', 'Video')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('event_date', models.DateField()),
                ('media_file', models.FileField(blank=True, null=True, upload_to='media_requests/')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Completed', 'Completed'), ('Rejected', 'Rejected')], default='Pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SpeakerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100)),
                ('designation', models.CharField(max_length=100)),
                ('affiliation', models.CharField(max_length=100)),
                ('contact_email', models.EmailField(max_length=254)),
                ('contact_number', models.CharField(max_length=15)),
                ('linkedin_url', models.URLField(blank=True, help_text='LinkedIn profile URL', null=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='speakers/')),
                ('detailed_profile', models.TextField()),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='speakers', to='emt.eventproposal')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_number', models.CharField(blank=True, max_length=50)),
                ('department', models.CharField(blank=True, max_length=120, null=True)),
                ('academic_year', models.CharField(blank=True, max_length=12, null=True)),
                ('current_semester', models.CharField(blank=True, max_length=20, null=True)),
                ('gpa', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('attendance', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('major', models.CharField(blank=True, max_length=120, null=True)),
                ('enrollment_year', models.PositiveIntegerField(blank=True, null=True)),
                ('events', models.ManyToManyField(blank=True, related_name='participants', to='emt.eventproposal')),
                ('mentor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mentees', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TentativeFlow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('proposal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='tentative_flow', to='emt.eventproposal')),
            ],
        ),
        migrations.CreateModel(
            name='CDLTaskAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_key', models.CharField(max_length=100)),
                ('label', models.CharField(blank=True, help_text='Display label for custom tasks', max_length=200)),
                ('status', models.CharField(choices=[('backlog', 'Backlog'), ('assigned', 'Assigned'), ('in_progress', 'In Progress'), ('done', 'Done')], default='assigned', max_length=20)),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cdl_resource_tasks_assigned', to=settings.AUTH_USER_MODEL)),
                ('assignee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cdl_resource_tasks', to=settings.AUTH_USER_MODEL)),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cdl_task_assignments', to='emt.eventproposal')),
            ],
            options={
                'indexes': [models.Index(fields=['assignee'], name='emt_cdltask_assigne_9e354d_idx'), models.Index(fields=['proposal', 'resource_key'], name='emt_cdltask_proposa_e4388f_idx')],
                'unique_together': {('proposal', 'resource_key')},
            },
        ),
    ]
